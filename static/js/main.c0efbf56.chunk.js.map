{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","components/Header.js","containers/App.js","actions.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getImgSrc","id","size","Card","props","name","email","small","medium","large","className","src","srcSet","alt","CardList","cats","map","cat","i","SearchBox","searchField","searchChange","value","type","placeholder","onChange","Scroll","style","overflowY","border","children","CHANGE_SEARCH_FIELD","REQUEST_CATS_PENDING","REQUEST_CATS_SUCCESS","REQUEST_CATS_FAILED","Header","React","memo","displayName","connect","state","searchCats","requestCats","isPending","error","dispatch","onSearchChange","event","text","target","payload","onRequestCats","fetch","response","json","users","catch","useEffect","filteredCats","filter","toLowerCase","includes","initialStateSearch","initialStateCats","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c0efbf56.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const getImgSrc = (id, size) => {\n  return `https://robohash.org/${id}?set=set4&size=${size}x${size}`;\n};\n\nconst Card = (props) => {\n  const { id, name, email } = props;\n\n  const small = getImgSrc(id, 50);\n  const medium = getImgSrc(id, 100);\n  const large = getImgSrc(id, 150);\n\n  return (\n    <div className=\"bg-light-pink dib br3 pa3 ma2 grow pointer shadow-2\">\n      <img src={small} srcSet={`${small} 300w, ${medium} 768w, ${large} 1280w`} alt=\"cat\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ cats }) => {\n  return (\n    <section>\n      {cats.map((cat, i) => {\n        return <Card key={i} id={cat.id} name={cat.name} email={cat.email} />;\n      })}\n    </section>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"search-cats\"\n        className=\"pa3 b--green bg-lightest-blue\"\n        value={searchField}\n        type=\"search\"\n        placeholder=\"search cats\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return <div style={{ overflowY: 'scroll', border: '1px solid grey' }}>{props.children}</div>;\n};\n\nexport default Scroll;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_CATS_PENDING = 'REQUEST_CATS_PENDING';\nexport const REQUEST_CATS_SUCCESS = 'REQUEST_CATS_SUCCESS';\nexport const REQUEST_CATS_FAILED = 'REQUEST_CATS_FAILED';\n","import React from 'react';\n\nexport const Header = React.memo(\n  () => {\n    return (\n      <header className=\"pa1\">\n        <h1>MURRR</h1>\n      </header>\n    );\n  },\n  () => {\n    return true;\n  }\n);\n\nHeader.displayName = 'Header';\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport { requestRobots, setSearchField } from '../actions';\nimport { Header } from '../components/Header';\n\nconst mapStateToProps = (state) => ({\n  searchField: state.searchCats.searchField,\n  cats: state.requestCats.cats,\n  isPending: state.requestCats.isPending,\n  error: state.requestCats.error\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestCats: () => dispatch(requestRobots())\n});\n\nconst App = (props) => {\n  const { searchField, onSearchChange, cats, isPending } = props;\n\n  useEffect(() => {\n    props.onRequestCats();\n  }, []);\n\n  let filteredCats = cats.filter((cat) => {\n    return cat.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return isPending ? (\n    <h1>Loading</h1>\n  ) : (\n    <div className=\"tc\">\n      <Header />\n      <Scroll>\n        <SearchBox searchField={searchField} searchChange={onSearchChange} />\n        <CardList cats={filteredCats} />\n      </Scroll>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_CATS_PENDING,\n  REQUEST_CATS_FAILED,\n  REQUEST_CATS_SUCCESS\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_CATS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((users) => {\n      dispatch({ type: REQUEST_CATS_SUCCESS, payload: users });\n    })\n    .catch((error) => dispatch({ type: REQUEST_CATS_FAILED, payload: error }));\n};\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_CATS_PENDING,\n  REQUEST_CATS_FAILED,\n  REQUEST_CATS_SUCCESS\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nexport const searchCats = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateCats = {\n  isPending: false,\n  error: null,\n  cats: []\n};\n\nexport const requestCats = (state = initialStateCats, action = {}) => {\n  switch (action.type) {\n    case REQUEST_CATS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_CATS_SUCCESS:\n      return { ...state, cats: action.payload, isPending: false };\n    case REQUEST_CATS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchCats, requestCats } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst rootReducer = combineReducers({ searchCats, requestCats });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}